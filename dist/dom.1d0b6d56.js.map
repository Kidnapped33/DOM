{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    // create: function () { }//等价\r\n    // 注释：创造一个tagName，返回的值是\r\n    // 创建一个标签节点\r\n    // create(tagName) {\r\n    //     return document.createElement(tagName)\r\n    // }\r\n\r\n    // template可以容纳任意元素\r\n    //增删改查----增\r\n    create(string) {//创建节点\r\n        const container = document.createElement('template')\r\n        container.innerHTML = string.trim()\r\n        return container.content.firstChild\r\n    },\r\n    after(node, node2) {//新增弟弟\r\n        // 如果node是最后一个节点也可以实行\r\n        node.parentNode.insertBefore(node2, node.nextSibling)\r\n    },\r\n    before(node, node2) {//新增哥哥\r\n        node.parentNode.insertBefore(node2, node)\r\n    },\r\n    append(parent, node) {//新增孩子\r\n        parent.appendChild(node)\r\n    },\r\n    wrap(node, parent) {//新增爸爸\r\n        dom.before(node, parent)\r\n        dom.append(parent, node)\r\n    },\r\n    //增删改查----删\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        //让删除的人保留node节点的引用\r\n        return node\r\n    },\r\n    //删掉所有的孩子,删除后array还可以引用,因为childNodes每次删除，\r\n    empty(node) {\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n    //增删改查----改\r\n    //读写属性，改title\r\n    attr(node, name, value) {//重载\r\n        //如果参数长度等于3个，则是改名字\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        }  //如果参数长度等于2个，则是获取名字，获取要return\r\n        else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    //改文本内容\r\n    text(node, string) {//适配\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) {\r\n                node.innerText = string //ie\r\n            } else {\r\n                node.textContent = string // firefox/ Chrome\r\n            }\r\n        }\r\n        else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText  //ie\r\n            } else {\r\n                return node.textContent // firefox/ Chrome\r\n            }\r\n        }\r\n    },\r\n    //改html内容\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n\r\n    // style(node, object) {\r\n    //     for (let key in object) {\r\n    //         //key:border/color\r\n    //         //node.style.border = ...\r\n    //         //node.style.color=...\r\n    //         node.style[key] = object[key]\r\n    //     }\r\n    // }\r\n    //改style内容\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            //dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        }\r\n        else if (arguments.length === 2) {\r\n            //dom.style(div,'color')\r\n            if (typeof name === 'string') {\r\n                return node.style[name]\r\n            }\r\n            else if (name instanceof Object) {\r\n                //dom.style(div,{color:'red'})\r\n                for (let key in name) {\r\n                    node.style[key] = name[key]\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    //改class内容\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        },\r\n    },\r\n\r\n    //添加监听事件\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    //删除监听事件\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n\r\n\r\n\r\n    //查\r\n    // find(selector) {\r\n    //     return document.querySelectorAll(selector)\r\n    // }\r\n    find(selector, scope) {\r\n        //如果有多个，那就在scope范围里面找，没有就直接document\r\n        // let x = scope || document\r\n        // return x.querySelectorAll(selector) 和下面等价\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n    },\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        //3是文本，相关资料查node.nodeType\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        //3是文本，相关资料查node.nodeType\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n\r\n}\r\n// dom.create = function () { } //等价\r\n// window.dom.create = function () { } //等价\r\n"]}